[{"D:\\CODING\\MERN_stack\\frontend\\src\\index.js":"1","D:\\CODING\\MERN_stack\\frontend\\src\\reportWebVitals.js":"2","D:\\CODING\\MERN_stack\\frontend\\src\\App.js":"3","D:\\CODING\\MERN_stack\\frontend\\src\\reducers\\index.js":"4","D:\\CODING\\MERN_stack\\frontend\\src\\Components\\Login\\Login.js":"5","D:\\CODING\\MERN_stack\\frontend\\src\\Components\\Login\\Register.js":"6","D:\\CODING\\MERN_stack\\frontend\\src\\Components\\ManageUsers\\index.js":"7","D:\\CODING\\MERN_stack\\frontend\\src\\reducers\\user\\index.js":"8","D:\\CODING\\MERN_stack\\frontend\\src\\action\\userAction.js":"9","D:\\CODING\\MERN_stack\\frontend\\src\\BASE_URL\\index.js":"10"},{"size":876,"mtime":1663083466998,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1661688724217,"results":"13","hashOfConfig":"12"},{"size":654,"mtime":1663082002728,"results":"14","hashOfConfig":"12"},{"size":126,"mtime":1663078370751,"results":"15","hashOfConfig":"12"},{"size":2338,"mtime":1662994710393,"results":"16","hashOfConfig":"12"},{"size":3193,"mtime":1663083485674,"results":"17","hashOfConfig":"12"},{"size":7164,"mtime":1663082419017,"results":"18","hashOfConfig":"12"},{"size":655,"mtime":1663077478180,"results":"19","hashOfConfig":"12"},{"size":979,"mtime":1663078056202,"results":"20","hashOfConfig":"12"},{"size":47,"mtime":1663077732443,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"abwaa8",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\CODING\\MERN_stack\\frontend\\src\\index.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\reportWebVitals.js",[],[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\App.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\reducers\\index.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\Components\\Login\\Login.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\Components\\Login\\Register.js",["54"],[],"D:\\CODING\\MERN_stack\\frontend\\src\\Components\\ManageUsers\\index.js",["55","56"],[],"import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport MaterialReactTable from \"material-react-table\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Stack,\r\n  TextField,\r\n  Tooltip,\r\n} from \"@mui/material\";\r\nimport { Delete, Edit } from \"@mui/icons-material\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst ManageUsers = () => {\r\n  const dispatch = useDispatch()\r\n  const [createModalOpen, setCreateModalOpen] = useState(false);\r\n  const [tableData, setTableData] = useState({});\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const columns = [\r\n    {\r\n      accessorKey: \"name\",\r\n      header: \"First Name\",\r\n      size: 140,\r\n    },\r\n    {\r\n      accessorKey: \"email\",\r\n      header: \"Email\",\r\n    }\r\n  ];\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, [rowSelection]);\r\n\r\n  const getUsers = async () => {\r\n    await axios\r\n      .get(\"http://localhost:5000/users\")\r\n      .then((res) => {\r\n        setTableData(res.data);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleCreateNewRow = async (values) => {\r\n    await axios\r\n      .post(\"http://localhost:5000/register\", values)\r\n      .then((res) => {\r\n        Swal.fire(\"Success!\", \"Data submitted sucessfully\", \"success\").then(\r\n          (move) => getUsers()\r\n        );\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleSaveRowEdits = async ({ exitEditingMode, row, values }) => {\r\n    await axios\r\n      .put(`http://localhost:5000/user/${row.original._id}`, {...values, password: row.original.password})\r\n      .then((res) => {\r\n        exitEditingMode();\r\n        Swal.fire(\"Success!\", \"Data updated sucessfully\", \"success\").then(\r\n          (move) => getUsers()\r\n        );\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const handleMassDelete = () => {\r\n    const IDs = Object.keys(rowSelection)\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then(async (result) => {\r\n      await axios\r\n        .post('http://localhost:5000/delete-users', IDs)\r\n        .then((res) => {\r\n          if (result.isConfirmed) {\r\n            Swal.fire(\r\n              \"Deleted!\",\r\n              \"Your data has been deleted.\",\r\n              \"success\"\r\n            ).then((move) => getUsers());\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  }\r\n\r\n  const handleDeleteRow = (row) => {\r\n    Swal.fire({\r\n      title: \"Are you sure?\",\r\n      text: \"You won't be able to revert this!\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Yes, delete it!\",\r\n    }).then(async (result) => {\r\n      await axios\r\n        .delete(`http://localhost:5000/user/${row.original._id}`)\r\n        .then((res) => {\r\n          if (result.isConfirmed) {\r\n            Swal.fire(\r\n              \"Deleted!\",\r\n              \"Your file has been deleted.\",\r\n              \"success\"\r\n            ).then((move) => getUsers());\r\n          }\r\n        })\r\n        .catch((err) => console.log(err));\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MaterialReactTable\r\n        columns={columns}\r\n        data={tableData}\r\n        editingMode=\"modal\" //default\r\n        enableColumnOrdering\r\n        // enableEditing\r\n        enableRowSelection\r\n        getRowId={(row) => row._id} //give each row a more useful id\r\n        onRowSelectionChange={setRowSelection} //connect internal row selection state to your own\r\n        state={{ rowSelection }} //pass our managed row selection state to the table to use\r\n        onEditingRowSave={handleSaveRowEdits}\r\n        enableRowActions\r\n        positionActionsColumn=\"last\"\r\n        renderRowActions={({ row, table }) => (\r\n          <Box sx={{ display: \"flex\", gap: \"1rem\", flexWrap: \"nowrap\" }}>\r\n            <Tooltip arrow placement=\"left\" title=\"Edit\">\r\n              <IconButton onClick={() => table.setEditingRow(row)}>\r\n                <Edit />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Tooltip arrow placement=\"right\" title=\"Delete\">\r\n              <IconButton color=\"error\" onClick={() => handleDeleteRow(row)}>\r\n                <Delete />\r\n              </IconButton>\r\n            </Tooltip>\r\n          </Box>\r\n        )}\r\n        renderTopToolbarCustomActions={() => (\r\n          <div>\r\n            <Tooltip arrow placement=\"top\" title=\"Delete All\">\r\n              <IconButton color=\"error\" onClick={() => handleMassDelete()}>\r\n                <Delete />\r\n              </IconButton>\r\n            </Tooltip>\r\n            <Button\r\n              color=\"secondary\"\r\n              onClick={() => setCreateModalOpen(true)}\r\n              variant=\"contained\"\r\n            >\r\n              Create New Account\r\n            </Button>\r\n            \r\n          </div>\r\n        )}\r\n      />\r\n      <CreateNewAccountModal\r\n        columns={columns}\r\n        open={createModalOpen}\r\n        onClose={() => setCreateModalOpen(false)}\r\n        onSubmit={handleCreateNewRow}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\n//example of creating a mui dialog modal for creating new rows\r\nexport const CreateNewAccountModal = ({ open, columns, onClose, onSubmit }) => {\r\n  const [values, setValues] = useState(() =>\r\n    columns.reduce((acc, column) => {\r\n      acc[column.accessorKey ?? \"\"] = \"\";\r\n      return acc;\r\n    }, {})\r\n  );\r\n\r\n  const handleSubmit = () => {\r\n    onSubmit(values);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open}>\r\n      <DialogTitle textAlign=\"center\">Create New Account</DialogTitle>\r\n      <DialogContent>\r\n        <form onSubmit={(e) => e.preventDefault()}>\r\n          <Stack\r\n            sx={{\r\n              width: \"100%\",\r\n              minWidth: { xs: \"300px\", sm: \"360px\", md: \"400px\" },\r\n              gap: \"1.5rem\",\r\n            }}\r\n          >\r\n            {columns.map((column) => (\r\n              <TextField\r\n                key={column.accessorKey}\r\n                label={column.header}\r\n                name={column.accessorKey}\r\n                onChange={(e) =>\r\n                  setValues({ ...values, [e.target.name]: e.target.value })\r\n                }\r\n              />\r\n            ))}\r\n            <TextField\r\n                key=\"password\"\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                onChange={(e) =>\r\n                  setValues({ ...values, [e.target.name]: e.target.value })\r\n                }\r\n              />\r\n          </Stack>\r\n        </form>\r\n      </DialogContent>\r\n      <DialogActions sx={{ p: \"1.25rem\" }}>\r\n        <Button onClick={onClose}>Cancel</Button>\r\n        <Button color=\"secondary\" onClick={handleSubmit} variant=\"contained\">\r\n          Create New Account\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ManageUsers;\r\n","D:\\CODING\\MERN_stack\\frontend\\src\\reducers\\user\\index.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\action\\userAction.js",[],[],"D:\\CODING\\MERN_stack\\frontend\\src\\BASE_URL\\index.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":12,"column":9,"nodeType":"59","messageId":"60","endLine":12,"endColumn":17},{"ruleId":"57","severity":1,"message":"61","line":18,"column":23,"nodeType":"59","messageId":"60","endLine":18,"endColumn":34},{"ruleId":"57","severity":1,"message":"58","line":21,"column":9,"nodeType":"59","messageId":"60","endLine":21,"endColumn":17},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'useSelector' is defined but never used."]