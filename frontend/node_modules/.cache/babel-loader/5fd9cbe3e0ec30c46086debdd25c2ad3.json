{"ast":null,"code":"/**\n * match-sorter-utils\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n!function (e, n) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? n(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], n) : n((e = \"undefined\" != typeof globalThis ? globalThis : e || self).MatchSorterUtils = {});\n}(this, function (e) {\n  \"use strict\";\n\n  const n = {\n    \"À\": \"A\",\n    \"Á\": \"A\",\n    \"Â\": \"A\",\n    \"Ã\": \"A\",\n    \"Ä\": \"A\",\n    \"Å\": \"A\",\n    \"Ấ\": \"A\",\n    \"Ắ\": \"A\",\n    \"Ẳ\": \"A\",\n    \"Ẵ\": \"A\",\n    \"Ặ\": \"A\",\n    \"Æ\": \"AE\",\n    \"Ầ\": \"A\",\n    \"Ằ\": \"A\",\n    \"Ȃ\": \"A\",\n    \"Ç\": \"C\",\n    \"Ḉ\": \"C\",\n    \"È\": \"E\",\n    \"É\": \"E\",\n    \"Ê\": \"E\",\n    \"Ë\": \"E\",\n    \"Ế\": \"E\",\n    \"Ḗ\": \"E\",\n    \"Ề\": \"E\",\n    \"Ḕ\": \"E\",\n    \"Ḝ\": \"E\",\n    \"Ȇ\": \"E\",\n    \"Ì\": \"I\",\n    \"Í\": \"I\",\n    \"Î\": \"I\",\n    \"Ï\": \"I\",\n    \"Ḯ\": \"I\",\n    \"Ȋ\": \"I\",\n    \"Ð\": \"D\",\n    \"Ñ\": \"N\",\n    \"Ò\": \"O\",\n    \"Ó\": \"O\",\n    \"Ô\": \"O\",\n    \"Õ\": \"O\",\n    \"Ö\": \"O\",\n    \"Ø\": \"O\",\n    \"Ố\": \"O\",\n    \"Ṍ\": \"O\",\n    \"Ṓ\": \"O\",\n    \"Ȏ\": \"O\",\n    \"Ù\": \"U\",\n    \"Ú\": \"U\",\n    \"Û\": \"U\",\n    \"Ü\": \"U\",\n    \"Ý\": \"Y\",\n    \"à\": \"a\",\n    \"á\": \"a\",\n    \"â\": \"a\",\n    \"ã\": \"a\",\n    \"ä\": \"a\",\n    \"å\": \"a\",\n    \"ấ\": \"a\",\n    \"ắ\": \"a\",\n    \"ẳ\": \"a\",\n    \"ẵ\": \"a\",\n    \"ặ\": \"a\",\n    \"æ\": \"ae\",\n    \"ầ\": \"a\",\n    \"ằ\": \"a\",\n    \"ȃ\": \"a\",\n    \"ç\": \"c\",\n    \"ḉ\": \"c\",\n    \"è\": \"e\",\n    \"é\": \"e\",\n    \"ê\": \"e\",\n    \"ë\": \"e\",\n    \"ế\": \"e\",\n    \"ḗ\": \"e\",\n    \"ề\": \"e\",\n    \"ḕ\": \"e\",\n    \"ḝ\": \"e\",\n    \"ȇ\": \"e\",\n    \"ì\": \"i\",\n    \"í\": \"i\",\n    \"î\": \"i\",\n    \"ï\": \"i\",\n    \"ḯ\": \"i\",\n    \"ȋ\": \"i\",\n    \"ð\": \"d\",\n    \"ñ\": \"n\",\n    \"ò\": \"o\",\n    \"ó\": \"o\",\n    \"ô\": \"o\",\n    \"õ\": \"o\",\n    \"ö\": \"o\",\n    \"ø\": \"o\",\n    \"ố\": \"o\",\n    \"ṍ\": \"o\",\n    \"ṓ\": \"o\",\n    \"ȏ\": \"o\",\n    \"ù\": \"u\",\n    \"ú\": \"u\",\n    \"û\": \"u\",\n    \"ü\": \"u\",\n    \"ý\": \"y\",\n    \"ÿ\": \"y\",\n    \"Ā\": \"A\",\n    \"ā\": \"a\",\n    \"Ă\": \"A\",\n    \"ă\": \"a\",\n    \"Ą\": \"A\",\n    \"ą\": \"a\",\n    \"Ć\": \"C\",\n    \"ć\": \"c\",\n    \"Ĉ\": \"C\",\n    \"ĉ\": \"c\",\n    \"Ċ\": \"C\",\n    \"ċ\": \"c\",\n    \"Č\": \"C\",\n    \"č\": \"c\",\n    \"C̆\": \"C\",\n    \"c̆\": \"c\",\n    \"Ď\": \"D\",\n    \"ď\": \"d\",\n    \"Đ\": \"D\",\n    \"đ\": \"d\",\n    \"Ē\": \"E\",\n    \"ē\": \"e\",\n    \"Ĕ\": \"E\",\n    \"ĕ\": \"e\",\n    \"Ė\": \"E\",\n    \"ė\": \"e\",\n    \"Ę\": \"E\",\n    \"ę\": \"e\",\n    \"Ě\": \"E\",\n    \"ě\": \"e\",\n    \"Ĝ\": \"G\",\n    \"Ǵ\": \"G\",\n    \"ĝ\": \"g\",\n    \"ǵ\": \"g\",\n    \"Ğ\": \"G\",\n    \"ğ\": \"g\",\n    \"Ġ\": \"G\",\n    \"ġ\": \"g\",\n    \"Ģ\": \"G\",\n    \"ģ\": \"g\",\n    \"Ĥ\": \"H\",\n    \"ĥ\": \"h\",\n    \"Ħ\": \"H\",\n    \"ħ\": \"h\",\n    \"Ḫ\": \"H\",\n    \"ḫ\": \"h\",\n    \"Ĩ\": \"I\",\n    \"ĩ\": \"i\",\n    \"Ī\": \"I\",\n    \"ī\": \"i\",\n    \"Ĭ\": \"I\",\n    \"ĭ\": \"i\",\n    \"Į\": \"I\",\n    \"į\": \"i\",\n    \"İ\": \"I\",\n    \"ı\": \"i\",\n    \"Ĳ\": \"IJ\",\n    \"ĳ\": \"ij\",\n    \"Ĵ\": \"J\",\n    \"ĵ\": \"j\",\n    \"Ķ\": \"K\",\n    \"ķ\": \"k\",\n    \"Ḱ\": \"K\",\n    \"ḱ\": \"k\",\n    \"K̆\": \"K\",\n    \"k̆\": \"k\",\n    \"Ĺ\": \"L\",\n    \"ĺ\": \"l\",\n    \"Ļ\": \"L\",\n    \"ļ\": \"l\",\n    \"Ľ\": \"L\",\n    \"ľ\": \"l\",\n    \"Ŀ\": \"L\",\n    \"ŀ\": \"l\",\n    \"Ł\": \"l\",\n    \"ł\": \"l\",\n    \"Ḿ\": \"M\",\n    \"ḿ\": \"m\",\n    \"M̆\": \"M\",\n    \"m̆\": \"m\",\n    \"Ń\": \"N\",\n    \"ń\": \"n\",\n    \"Ņ\": \"N\",\n    \"ņ\": \"n\",\n    \"Ň\": \"N\",\n    \"ň\": \"n\",\n    \"ŉ\": \"n\",\n    \"N̆\": \"N\",\n    \"n̆\": \"n\",\n    \"Ō\": \"O\",\n    \"ō\": \"o\",\n    \"Ŏ\": \"O\",\n    \"ŏ\": \"o\",\n    \"Ő\": \"O\",\n    \"ő\": \"o\",\n    \"Œ\": \"OE\",\n    \"œ\": \"oe\",\n    \"P̆\": \"P\",\n    \"p̆\": \"p\",\n    \"Ŕ\": \"R\",\n    \"ŕ\": \"r\",\n    \"Ŗ\": \"R\",\n    \"ŗ\": \"r\",\n    \"Ř\": \"R\",\n    \"ř\": \"r\",\n    \"R̆\": \"R\",\n    \"r̆\": \"r\",\n    \"Ȓ\": \"R\",\n    \"ȓ\": \"r\",\n    \"Ś\": \"S\",\n    \"ś\": \"s\",\n    \"Ŝ\": \"S\",\n    \"ŝ\": \"s\",\n    \"Ş\": \"S\",\n    \"Ș\": \"S\",\n    \"ș\": \"s\",\n    \"ş\": \"s\",\n    \"Š\": \"S\",\n    \"š\": \"s\",\n    \"Ţ\": \"T\",\n    \"ţ\": \"t\",\n    \"ț\": \"t\",\n    \"Ț\": \"T\",\n    \"Ť\": \"T\",\n    \"ť\": \"t\",\n    \"Ŧ\": \"T\",\n    \"ŧ\": \"t\",\n    \"T̆\": \"T\",\n    \"t̆\": \"t\",\n    \"Ũ\": \"U\",\n    \"ũ\": \"u\",\n    \"Ū\": \"U\",\n    \"ū\": \"u\",\n    \"Ŭ\": \"U\",\n    \"ŭ\": \"u\",\n    \"Ů\": \"U\",\n    \"ů\": \"u\",\n    \"Ű\": \"U\",\n    \"ű\": \"u\",\n    \"Ų\": \"U\",\n    \"ų\": \"u\",\n    \"Ȗ\": \"U\",\n    \"ȗ\": \"u\",\n    \"V̆\": \"V\",\n    \"v̆\": \"v\",\n    \"Ŵ\": \"W\",\n    \"ŵ\": \"w\",\n    \"Ẃ\": \"W\",\n    \"ẃ\": \"w\",\n    \"X̆\": \"X\",\n    \"x̆\": \"x\",\n    \"Ŷ\": \"Y\",\n    \"ŷ\": \"y\",\n    \"Ÿ\": \"Y\",\n    \"Y̆\": \"Y\",\n    \"y̆\": \"y\",\n    \"Ź\": \"Z\",\n    \"ź\": \"z\",\n    \"Ż\": \"Z\",\n    \"ż\": \"z\",\n    \"Ž\": \"Z\",\n    \"ž\": \"z\",\n    \"ſ\": \"s\",\n    \"ƒ\": \"f\",\n    \"Ơ\": \"O\",\n    \"ơ\": \"o\",\n    \"Ư\": \"U\",\n    \"ư\": \"u\",\n    \"Ǎ\": \"A\",\n    \"ǎ\": \"a\",\n    \"Ǐ\": \"I\",\n    \"ǐ\": \"i\",\n    \"Ǒ\": \"O\",\n    \"ǒ\": \"o\",\n    \"Ǔ\": \"U\",\n    \"ǔ\": \"u\",\n    \"Ǖ\": \"U\",\n    \"ǖ\": \"u\",\n    \"Ǘ\": \"U\",\n    \"ǘ\": \"u\",\n    \"Ǚ\": \"U\",\n    \"ǚ\": \"u\",\n    \"Ǜ\": \"U\",\n    \"ǜ\": \"u\",\n    \"Ứ\": \"U\",\n    \"ứ\": \"u\",\n    \"Ṹ\": \"U\",\n    \"ṹ\": \"u\",\n    \"Ǻ\": \"A\",\n    \"ǻ\": \"a\",\n    \"Ǽ\": \"AE\",\n    \"ǽ\": \"ae\",\n    \"Ǿ\": \"O\",\n    \"ǿ\": \"o\",\n    \"Þ\": \"TH\",\n    \"þ\": \"th\",\n    \"Ṕ\": \"P\",\n    \"ṕ\": \"p\",\n    \"Ṥ\": \"S\",\n    \"ṥ\": \"s\",\n    \"X́\": \"X\",\n    \"x́\": \"x\",\n    \"Ѓ\": \"Г\",\n    \"ѓ\": \"г\",\n    \"Ќ\": \"К\",\n    \"ќ\": \"к\",\n    \"A̋\": \"A\",\n    \"a̋\": \"a\",\n    \"E̋\": \"E\",\n    \"e̋\": \"e\",\n    \"I̋\": \"I\",\n    \"i̋\": \"i\",\n    \"Ǹ\": \"N\",\n    \"ǹ\": \"n\",\n    \"Ồ\": \"O\",\n    \"ồ\": \"o\",\n    \"Ṑ\": \"O\",\n    \"ṑ\": \"o\",\n    \"Ừ\": \"U\",\n    \"ừ\": \"u\",\n    \"Ẁ\": \"W\",\n    \"ẁ\": \"w\",\n    \"Ỳ\": \"Y\",\n    \"ỳ\": \"y\",\n    \"Ȁ\": \"A\",\n    \"ȁ\": \"a\",\n    \"Ȅ\": \"E\",\n    \"ȅ\": \"e\",\n    \"Ȉ\": \"I\",\n    \"ȉ\": \"i\",\n    \"Ȍ\": \"O\",\n    \"ȍ\": \"o\",\n    \"Ȑ\": \"R\",\n    \"ȑ\": \"r\",\n    \"Ȕ\": \"U\",\n    \"ȕ\": \"u\",\n    \"B̌\": \"B\",\n    \"b̌\": \"b\",\n    \"Č̣\": \"C\",\n    \"č̣\": \"c\",\n    \"Ê̌\": \"E\",\n    \"ê̌\": \"e\",\n    \"F̌\": \"F\",\n    \"f̌\": \"f\",\n    \"Ǧ\": \"G\",\n    \"ǧ\": \"g\",\n    \"Ȟ\": \"H\",\n    \"ȟ\": \"h\",\n    \"J̌\": \"J\",\n    \"ǰ\": \"j\",\n    \"Ǩ\": \"K\",\n    \"ǩ\": \"k\",\n    \"M̌\": \"M\",\n    \"m̌\": \"m\",\n    \"P̌\": \"P\",\n    \"p̌\": \"p\",\n    \"Q̌\": \"Q\",\n    \"q̌\": \"q\",\n    \"Ř̩\": \"R\",\n    \"ř̩\": \"r\",\n    \"Ṧ\": \"S\",\n    \"ṧ\": \"s\",\n    \"V̌\": \"V\",\n    \"v̌\": \"v\",\n    \"W̌\": \"W\",\n    \"w̌\": \"w\",\n    \"X̌\": \"X\",\n    \"x̌\": \"x\",\n    \"Y̌\": \"Y\",\n    \"y̌\": \"y\",\n    \"A̧\": \"A\",\n    \"a̧\": \"a\",\n    \"B̧\": \"B\",\n    \"b̧\": \"b\",\n    \"Ḑ\": \"D\",\n    \"ḑ\": \"d\",\n    \"Ȩ\": \"E\",\n    \"ȩ\": \"e\",\n    \"Ɛ̧\": \"E\",\n    \"ɛ̧\": \"e\",\n    \"Ḩ\": \"H\",\n    \"ḩ\": \"h\",\n    \"I̧\": \"I\",\n    \"i̧\": \"i\",\n    \"Ɨ̧\": \"I\",\n    \"ɨ̧\": \"i\",\n    \"M̧\": \"M\",\n    \"m̧\": \"m\",\n    \"O̧\": \"O\",\n    \"o̧\": \"o\",\n    \"Q̧\": \"Q\",\n    \"q̧\": \"q\",\n    \"U̧\": \"U\",\n    \"u̧\": \"u\",\n    \"X̧\": \"X\",\n    \"x̧\": \"x\",\n    \"Z̧\": \"Z\",\n    \"z̧\": \"z\"\n  },\n        t = Object.keys(n).join(\"|\"),\n        r = new RegExp(t, \"g\");\n  /**\n     * @name match-sorter\n     * @license MIT license.\n     * @copyright (c) 2099 Kent C. Dodds\n     * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n     */\n\n  const o = {\n    CASE_SENSITIVE_EQUAL: 7,\n    EQUAL: 6,\n    STARTS_WITH: 5,\n    WORD_STARTS_WITH: 4,\n    CONTAINS: 3,\n    ACRONYM: 2,\n    MATCHES: 1,\n    NO_MATCH: 0\n  };\n\n  function s(e, n, t) {\n    return e = a(e, t), (n = a(n, t)).length > e.length ? o.NO_MATCH : e === n ? o.CASE_SENSITIVE_EQUAL : (e = e.toLowerCase()) === (n = n.toLowerCase()) ? o.EQUAL : e.startsWith(n) ? o.STARTS_WITH : e.includes(\" \" + n) ? o.WORD_STARTS_WITH : e.includes(n) ? o.CONTAINS : 1 === n.length ? o.NO_MATCH : function (e) {\n      let n = \"\";\n      return e.split(\" \").forEach(e => {\n        e.split(\"-\").forEach(e => {\n          n += e.substr(0, 1);\n        });\n      }), n;\n    }(e).includes(n) ? o.ACRONYM : function (e, n) {\n      let t = 0,\n          r = 0;\n\n      function s(e, n, r) {\n        for (let o = r, s = n.length; o < s; o++) {\n          if (n[o] === e) return t += 1, o + 1;\n        }\n\n        return -1;\n      }\n\n      function a(e) {\n        const r = 1 / e,\n              s = t / n.length;\n        return o.MATCHES + s * r;\n      }\n\n      const i = s(n[0], e, 0);\n      if (i < 0) return o.NO_MATCH;\n      r = i;\n\n      for (let t = 1, a = n.length; t < a; t++) {\n        r = s(n[t], e, r);\n        if (!(r > -1)) return o.NO_MATCH;\n      }\n\n      return a(r - i);\n    }(e, n);\n  }\n\n  function a(e, t) {\n    let {\n      keepDiacritics: o\n    } = t;\n    return e = \"\" + e, o || (e = e.replace(r, e => n[e])), e;\n  }\n\n  function i(e, n) {\n    let t = n;\n    \"object\" == typeof n && (t = n.accessor);\n    const r = t(e);\n    return null == r ? [] : Array.isArray(r) ? r : [String(r)];\n  }\n\n  const u = {\n    maxRanking: 1 / 0,\n    minRanking: -1 / 0\n  };\n\n  function c(e) {\n    return \"function\" == typeof e ? u : { ...u,\n      ...e\n    };\n  }\n\n  e.compareItems = function (e, n) {\n    return e.rank === n.rank ? 0 : e.rank > n.rank ? -1 : 1;\n  }, e.rankItem = function (e, n, t) {\n    var r;\n\n    if ((t = t || {}).threshold = null != (r = t.threshold) ? r : o.MATCHES, !t.accessors) {\n      const r = s(e, n, t);\n      return {\n        rankedValue: e,\n        rank: r,\n        accessorIndex: -1,\n        accessorThreshold: t.threshold,\n        passed: r >= t.threshold\n      };\n    }\n\n    const a = function (e, n) {\n      const t = [];\n\n      for (let r = 0, o = n.length; r < o; r++) {\n        const o = n[r],\n              s = c(o),\n              a = i(e, o);\n\n        for (let e = 0, n = a.length; e < n; e++) t.push({\n          itemValue: a[e],\n          attributes: s\n        });\n      }\n\n      return t;\n    }(e, t.accessors),\n          u = {\n      rankedValue: e,\n      rank: o.NO_MATCH,\n      accessorIndex: -1,\n      accessorThreshold: t.threshold,\n      passed: !1\n    };\n\n    for (let e = 0; e < a.length; e++) {\n      const r = a[e];\n      let i = s(r.itemValue, n, t);\n      const {\n        minRanking: c,\n        maxRanking: l,\n        threshold: A\n      } = r.attributes;\n      i < c && i >= o.MATCHES ? i = c : i > l && (i = l), i = Math.min(i, l), i > u.rank && (u.rank = i, u.accessorIndex = e, u.accessorThreshold = A, u.rankedValue = r.itemValue);\n    }\n\n    return u;\n  }, e.rankings = o, Object.defineProperty(e, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"mappings":"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","names":["characterMap","À","Á","Â","Ã","Ä","Å","Ấ","Ắ","Ẳ","Ẵ","Ặ","Æ","Ầ","Ằ","Ȃ","Ç","Ḉ","È","É","Ê","Ë","Ế","Ḗ","Ề","Ḕ","Ḝ","Ȇ","Ì","Í","Î","Ï","Ḯ","Ȋ","Ð","Ñ","Ò","Ó","Ô","Õ","Ö","Ø","Ố","Ṍ","Ṓ","Ȏ","Ù","Ú","Û","Ü","Ý","à","á","â","ã","ä","å","ấ","ắ","ẳ","ẵ","ặ","æ","ầ","ằ","ȃ","ç","ḉ","è","é","ê","ë","ế","ḗ","ề","ḕ","ḝ","ȇ","ì","í","î","ï","ḯ","ȋ","ð","ñ","ò","ó","ô","õ","ö","ø","ố","ṍ","ṓ","ȏ","ù","ú","û","ü","ý","ÿ","Ā","ā","Ă","ă","Ą","ą","Ć","ć","Ĉ","ĉ","Ċ","ċ","Č","č","C̆","c̆","Ď","ď","Đ","đ","Ē","ē","Ĕ","ĕ","Ė","ė","Ę","ę","Ě","ě","Ĝ","Ǵ","ĝ","ǵ","Ğ","ğ","Ġ","ġ","Ģ","ģ","Ĥ","ĥ","Ħ","ħ","Ḫ","ḫ","Ĩ","ĩ","Ī","ī","Ĭ","ĭ","Į","į","İ","ı","Ĳ","ĳ","Ĵ","ĵ","Ķ","ķ","Ḱ","ḱ","K̆","k̆","Ĺ","ĺ","Ļ","ļ","Ľ","ľ","Ŀ","ŀ","Ł","ł","Ḿ","ḿ","M̆","m̆","Ń","ń","Ņ","ņ","Ň","ň","ŉ","N̆","n̆","Ō","ō","Ŏ","ŏ","Ő","ő","Œ","œ","P̆","p̆","Ŕ","ŕ","Ŗ","ŗ","Ř","ř","R̆","r̆","Ȓ","ȓ","Ś","ś","Ŝ","ŝ","Ş","Ș","ș","ş","Š","š","Ţ","ţ","ț","Ț","Ť","ť","Ŧ","ŧ","T̆","t̆","Ũ","ũ","Ū","ū","Ŭ","ŭ","Ů","ů","Ű","ű","Ų","ų","Ȗ","ȗ","V̆","v̆","Ŵ","ŵ","Ẃ","ẃ","X̆","x̆","Ŷ","ŷ","Ÿ","Y̆","y̆","Ź","ź","Ż","ż","Ž","ž","ſ","ƒ","Ơ","ơ","Ư","ư","Ǎ","ǎ","Ǐ","ǐ","Ǒ","ǒ","Ǔ","ǔ","Ǖ","ǖ","Ǘ","ǘ","Ǚ","ǚ","Ǜ","ǜ","Ứ","ứ","Ṹ","ṹ","Ǻ","ǻ","Ǽ","ǽ","Ǿ","ǿ","Þ","þ","Ṕ","ṕ","Ṥ","ṥ","X́","x́","Ѓ","ѓ","Ќ","ќ","A̋","a̋","E̋","e̋","I̋","i̋","Ǹ","ǹ","Ồ","ồ","Ṑ","ṑ","Ừ","ừ","Ẁ","ẁ","Ỳ","ỳ","Ȁ","ȁ","Ȅ","ȅ","Ȉ","ȉ","Ȍ","ȍ","Ȑ","ȑ","Ȕ","ȕ","B̌","b̌","Č̣","č̣","Ê̌","ê̌","F̌","f̌","Ǧ","ǧ","Ȟ","ȟ","J̌","ǰ","Ǩ","ǩ","M̌","m̌","P̌","p̌","Q̌","q̌","Ř̩","ř̩","Ṧ","ṧ","V̌","v̌","W̌","w̌","X̌","x̌","Y̌","y̌","A̧","a̧","B̧","b̧","Ḑ","ḑ","Ȩ","ȩ","Ɛ̧","ɛ̧","Ḩ","ḩ","I̧","i̧","Ɨ̧","ɨ̧","M̧","m̧","O̧","o̧","Q̧","q̧","U̧","u̧","X̧","x̧","Z̧","z̧","chars","Object","keys","join","allAccents","RegExp","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","CONTAINS","ACRONYM","MATCHES","NO_MATCH","getMatchRanking","testString","stringToRank","options","prepareValueForComparison","length","toLowerCase","startsWith","includes","string","acronym","split","forEach","wordInString","splitByHyphenWord","substr","getAcronym","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","index","j","J","getRanking","spread","spreadPercentage","inOrderPercentage","firstIndex","i","I","getClosenessRanking","value","_ref","keepDiacritics","replace","match","getItemValues","item","accessor","accessorFn","Array","isArray","String","defaultKeyAttributes","maxRanking","Infinity","minRanking","getAccessorAttributes","a","b","rank","e","threshold","accessors","rankedValue","accessorIndex","accessorThreshold","passed","valuesToRank","allValues","attributes","itemValues","push","itemValue","getAllValuesToRank","rankingInfo","rankValue","newRank","Math","min"],"sources":["D:\\CODING\\MERN_stack\\frontend\\node_modules\\@tanstack\\match-sorter-utils\\src\\remove-accents.ts","D:\\CODING\\MERN_stack\\frontend\\node_modules\\@tanstack\\match-sorter-utils\\src\\index.ts"],"sourcesContent":["const characterMap: Record<string, string> = {\n  À: 'A',\n  Á: 'A',\n  Â: 'A',\n  Ã: 'A',\n  Ä: 'A',\n  Å: 'A',\n  Ấ: 'A',\n  Ắ: 'A',\n  Ẳ: 'A',\n  Ẵ: 'A',\n  Ặ: 'A',\n  Æ: 'AE',\n  Ầ: 'A',\n  Ằ: 'A',\n  Ȃ: 'A',\n  Ç: 'C',\n  Ḉ: 'C',\n  È: 'E',\n  É: 'E',\n  Ê: 'E',\n  Ë: 'E',\n  Ế: 'E',\n  Ḗ: 'E',\n  Ề: 'E',\n  Ḕ: 'E',\n  Ḝ: 'E',\n  Ȇ: 'E',\n  Ì: 'I',\n  Í: 'I',\n  Î: 'I',\n  Ï: 'I',\n  Ḯ: 'I',\n  Ȋ: 'I',\n  Ð: 'D',\n  Ñ: 'N',\n  Ò: 'O',\n  Ó: 'O',\n  Ô: 'O',\n  Õ: 'O',\n  Ö: 'O',\n  Ø: 'O',\n  Ố: 'O',\n  Ṍ: 'O',\n  Ṓ: 'O',\n  Ȏ: 'O',\n  Ù: 'U',\n  Ú: 'U',\n  Û: 'U',\n  Ü: 'U',\n  Ý: 'Y',\n  à: 'a',\n  á: 'a',\n  â: 'a',\n  ã: 'a',\n  ä: 'a',\n  å: 'a',\n  ấ: 'a',\n  ắ: 'a',\n  ẳ: 'a',\n  ẵ: 'a',\n  ặ: 'a',\n  æ: 'ae',\n  ầ: 'a',\n  ằ: 'a',\n  ȃ: 'a',\n  ç: 'c',\n  ḉ: 'c',\n  è: 'e',\n  é: 'e',\n  ê: 'e',\n  ë: 'e',\n  ế: 'e',\n  ḗ: 'e',\n  ề: 'e',\n  ḕ: 'e',\n  ḝ: 'e',\n  ȇ: 'e',\n  ì: 'i',\n  í: 'i',\n  î: 'i',\n  ï: 'i',\n  ḯ: 'i',\n  ȋ: 'i',\n  ð: 'd',\n  ñ: 'n',\n  ò: 'o',\n  ó: 'o',\n  ô: 'o',\n  õ: 'o',\n  ö: 'o',\n  ø: 'o',\n  ố: 'o',\n  ṍ: 'o',\n  ṓ: 'o',\n  ȏ: 'o',\n  ù: 'u',\n  ú: 'u',\n  û: 'u',\n  ü: 'u',\n  ý: 'y',\n  ÿ: 'y',\n  Ā: 'A',\n  ā: 'a',\n  Ă: 'A',\n  ă: 'a',\n  Ą: 'A',\n  ą: 'a',\n  Ć: 'C',\n  ć: 'c',\n  Ĉ: 'C',\n  ĉ: 'c',\n  Ċ: 'C',\n  ċ: 'c',\n  Č: 'C',\n  č: 'c',\n  C̆: 'C',\n  c̆: 'c',\n  Ď: 'D',\n  ď: 'd',\n  Đ: 'D',\n  đ: 'd',\n  Ē: 'E',\n  ē: 'e',\n  Ĕ: 'E',\n  ĕ: 'e',\n  Ė: 'E',\n  ė: 'e',\n  Ę: 'E',\n  ę: 'e',\n  Ě: 'E',\n  ě: 'e',\n  Ĝ: 'G',\n  Ǵ: 'G',\n  ĝ: 'g',\n  ǵ: 'g',\n  Ğ: 'G',\n  ğ: 'g',\n  Ġ: 'G',\n  ġ: 'g',\n  Ģ: 'G',\n  ģ: 'g',\n  Ĥ: 'H',\n  ĥ: 'h',\n  Ħ: 'H',\n  ħ: 'h',\n  Ḫ: 'H',\n  ḫ: 'h',\n  Ĩ: 'I',\n  ĩ: 'i',\n  Ī: 'I',\n  ī: 'i',\n  Ĭ: 'I',\n  ĭ: 'i',\n  Į: 'I',\n  į: 'i',\n  İ: 'I',\n  ı: 'i',\n  Ĳ: 'IJ',\n  ĳ: 'ij',\n  Ĵ: 'J',\n  ĵ: 'j',\n  Ķ: 'K',\n  ķ: 'k',\n  Ḱ: 'K',\n  ḱ: 'k',\n  K̆: 'K',\n  k̆: 'k',\n  Ĺ: 'L',\n  ĺ: 'l',\n  Ļ: 'L',\n  ļ: 'l',\n  Ľ: 'L',\n  ľ: 'l',\n  Ŀ: 'L',\n  ŀ: 'l',\n  Ł: 'l',\n  ł: 'l',\n  Ḿ: 'M',\n  ḿ: 'm',\n  M̆: 'M',\n  m̆: 'm',\n  Ń: 'N',\n  ń: 'n',\n  Ņ: 'N',\n  ņ: 'n',\n  Ň: 'N',\n  ň: 'n',\n  ŉ: 'n',\n  N̆: 'N',\n  n̆: 'n',\n  Ō: 'O',\n  ō: 'o',\n  Ŏ: 'O',\n  ŏ: 'o',\n  Ő: 'O',\n  ő: 'o',\n  Œ: 'OE',\n  œ: 'oe',\n  P̆: 'P',\n  p̆: 'p',\n  Ŕ: 'R',\n  ŕ: 'r',\n  Ŗ: 'R',\n  ŗ: 'r',\n  Ř: 'R',\n  ř: 'r',\n  R̆: 'R',\n  r̆: 'r',\n  Ȓ: 'R',\n  ȓ: 'r',\n  Ś: 'S',\n  ś: 's',\n  Ŝ: 'S',\n  ŝ: 's',\n  Ş: 'S',\n  Ș: 'S',\n  ș: 's',\n  ş: 's',\n  Š: 'S',\n  š: 's',\n  Ţ: 'T',\n  ţ: 't',\n  ț: 't',\n  Ț: 'T',\n  Ť: 'T',\n  ť: 't',\n  Ŧ: 'T',\n  ŧ: 't',\n  T̆: 'T',\n  t̆: 't',\n  Ũ: 'U',\n  ũ: 'u',\n  Ū: 'U',\n  ū: 'u',\n  Ŭ: 'U',\n  ŭ: 'u',\n  Ů: 'U',\n  ů: 'u',\n  Ű: 'U',\n  ű: 'u',\n  Ų: 'U',\n  ų: 'u',\n  Ȗ: 'U',\n  ȗ: 'u',\n  V̆: 'V',\n  v̆: 'v',\n  Ŵ: 'W',\n  ŵ: 'w',\n  Ẃ: 'W',\n  ẃ: 'w',\n  X̆: 'X',\n  x̆: 'x',\n  Ŷ: 'Y',\n  ŷ: 'y',\n  Ÿ: 'Y',\n  Y̆: 'Y',\n  y̆: 'y',\n  Ź: 'Z',\n  ź: 'z',\n  Ż: 'Z',\n  ż: 'z',\n  Ž: 'Z',\n  ž: 'z',\n  ſ: 's',\n  ƒ: 'f',\n  Ơ: 'O',\n  ơ: 'o',\n  Ư: 'U',\n  ư: 'u',\n  Ǎ: 'A',\n  ǎ: 'a',\n  Ǐ: 'I',\n  ǐ: 'i',\n  Ǒ: 'O',\n  ǒ: 'o',\n  Ǔ: 'U',\n  ǔ: 'u',\n  Ǖ: 'U',\n  ǖ: 'u',\n  Ǘ: 'U',\n  ǘ: 'u',\n  Ǚ: 'U',\n  ǚ: 'u',\n  Ǜ: 'U',\n  ǜ: 'u',\n  Ứ: 'U',\n  ứ: 'u',\n  Ṹ: 'U',\n  ṹ: 'u',\n  Ǻ: 'A',\n  ǻ: 'a',\n  Ǽ: 'AE',\n  ǽ: 'ae',\n  Ǿ: 'O',\n  ǿ: 'o',\n  Þ: 'TH',\n  þ: 'th',\n  Ṕ: 'P',\n  ṕ: 'p',\n  Ṥ: 'S',\n  ṥ: 's',\n  X́: 'X',\n  x́: 'x',\n  Ѓ: 'Г',\n  ѓ: 'г',\n  Ќ: 'К',\n  ќ: 'к',\n  A̋: 'A',\n  a̋: 'a',\n  E̋: 'E',\n  e̋: 'e',\n  I̋: 'I',\n  i̋: 'i',\n  Ǹ: 'N',\n  ǹ: 'n',\n  Ồ: 'O',\n  ồ: 'o',\n  Ṑ: 'O',\n  ṑ: 'o',\n  Ừ: 'U',\n  ừ: 'u',\n  Ẁ: 'W',\n  ẁ: 'w',\n  Ỳ: 'Y',\n  ỳ: 'y',\n  Ȁ: 'A',\n  ȁ: 'a',\n  Ȅ: 'E',\n  ȅ: 'e',\n  Ȉ: 'I',\n  ȉ: 'i',\n  Ȍ: 'O',\n  ȍ: 'o',\n  Ȑ: 'R',\n  ȑ: 'r',\n  Ȕ: 'U',\n  ȕ: 'u',\n  B̌: 'B',\n  b̌: 'b',\n  Č̣: 'C',\n  č̣: 'c',\n  Ê̌: 'E',\n  ê̌: 'e',\n  F̌: 'F',\n  f̌: 'f',\n  Ǧ: 'G',\n  ǧ: 'g',\n  Ȟ: 'H',\n  ȟ: 'h',\n  J̌: 'J',\n  ǰ: 'j',\n  Ǩ: 'K',\n  ǩ: 'k',\n  M̌: 'M',\n  m̌: 'm',\n  P̌: 'P',\n  p̌: 'p',\n  Q̌: 'Q',\n  q̌: 'q',\n  Ř̩: 'R',\n  ř̩: 'r',\n  Ṧ: 'S',\n  ṧ: 's',\n  V̌: 'V',\n  v̌: 'v',\n  W̌: 'W',\n  w̌: 'w',\n  X̌: 'X',\n  x̌: 'x',\n  Y̌: 'Y',\n  y̌: 'y',\n  A̧: 'A',\n  a̧: 'a',\n  B̧: 'B',\n  b̧: 'b',\n  Ḑ: 'D',\n  ḑ: 'd',\n  Ȩ: 'E',\n  ȩ: 'e',\n  Ɛ̧: 'E',\n  ɛ̧: 'e',\n  Ḩ: 'H',\n  ḩ: 'h',\n  I̧: 'I',\n  i̧: 'i',\n  Ɨ̧: 'I',\n  ɨ̧: 'i',\n  M̧: 'M',\n  m̧: 'm',\n  O̧: 'O',\n  o̧: 'o',\n  Q̧: 'Q',\n  q̧: 'q',\n  U̧: 'U',\n  u̧: 'u',\n  X̧: 'X',\n  x̧: 'x',\n  Z̧: 'Z',\n  z̧: 'z',\n}\n\nconst chars = Object.keys(characterMap).join('|')\nconst allAccents = new RegExp(chars, 'g')\n\nexport function removeAccents(str: string) {\n  return str.replace(allAccents, match => {\n    return characterMap[match]!\n  })\n}\n","/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2099 Kent C. Dodds\n * @author Kent C. Dodds <me@kentcdodds.com> (https://kentcdodds.com)\n */\n\n// This is a fork of match-sorter. Instead of offering\n// a unified API for filtering and sorting in a single pass,\n// match-sorter-utils provides the lower-level utilities of\n// ranking items and comparing ranks in a way that can\n// be incrementally applied to a system rather than\n// all-at-once.\n\n// 1. Use the rankItem function to rank an item\n// 2. Use the resulting rankingInfo.passed to filter\n// 3. Use the resulting rankingInfo.rank to sort\n\n// For bundling purposes (mainly remove-accents not being esm safe/ready),\n// we've also hard-coded remove-accents into this source.\n// The remove-accents package is still included as a dependency\n// for attribution purposes, but it will not be imported and bundled.\n\nimport { removeAccents } from './remove-accents'\n\nexport type AccessorAttributes = {\n  threshold?: Ranking\n  maxRanking: Ranking\n  minRanking: Ranking\n}\n\nexport interface RankingInfo {\n  rankedValue: any\n  rank: Ranking\n  accessorIndex: number\n  accessorThreshold: Ranking | undefined\n  passed: boolean\n}\n\nexport interface AccessorOptions<TItem> {\n  accessor: AccessorFn<TItem>\n  threshold?: Ranking\n  maxRanking?: Ranking\n  minRanking?: Ranking\n}\n\nexport type AccessorFn<TItem> = (item: TItem) => string | Array<string>\n\nexport type Accessor<TItem> = AccessorFn<TItem> | AccessorOptions<TItem>\n\nexport interface RankItemOptions<TItem = unknown> {\n  accessors?: ReadonlyArray<Accessor<TItem>>\n  threshold?: Ranking\n  keepDiacritics?: boolean\n}\n\nexport const rankings = {\n  CASE_SENSITIVE_EQUAL: 7,\n  EQUAL: 6,\n  STARTS_WITH: 5,\n  WORD_STARTS_WITH: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0,\n} as const\n\nexport type Ranking = typeof rankings[keyof typeof rankings]\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, accessorIndex: Number, accessorThreshold: Number}} - the highest ranking\n */\nexport function rankItem<TItem>(\n  item: TItem,\n  value: string,\n  options?: RankItemOptions<TItem>\n): RankingInfo {\n  options = options || {}\n\n  options.threshold = options.threshold ?? rankings.MATCHES\n\n  if (!options.accessors) {\n    // if keys is not specified, then we assume the item given is ready to be matched\n    const rank = getMatchRanking(item as unknown as string, value, options)\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedValue: item,\n      rank,\n      accessorIndex: -1,\n      accessorThreshold: options.threshold,\n      passed: rank >= options.threshold,\n    }\n  }\n\n  const valuesToRank = getAllValuesToRank(item, options.accessors)\n\n  const rankingInfo: RankingInfo = {\n    rankedValue: item,\n    rank: rankings.NO_MATCH as Ranking,\n    accessorIndex: -1,\n    accessorThreshold: options.threshold,\n    passed: false,\n  }\n\n  for (let i = 0; i < valuesToRank.length; i++) {\n    const rankValue = valuesToRank[i]!\n\n    let newRank = getMatchRanking(rankValue.itemValue, value, options)\n\n    const { minRanking, maxRanking, threshold } = rankValue.attributes\n\n    if (newRank < minRanking && newRank >= rankings.MATCHES) {\n      newRank = minRanking\n    } else if (newRank > maxRanking) {\n      newRank = maxRanking\n    }\n\n    newRank = Math.min(newRank, maxRanking) as Ranking\n\n    if (newRank > rankingInfo.rank) {\n      rankingInfo.rank = newRank\n      rankingInfo.accessorIndex = i\n      rankingInfo.accessorThreshold = threshold\n      rankingInfo.rankedValue = rankValue.itemValue\n    }\n  }\n\n  return rankingInfo\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking<TItem>(\n  testString: string,\n  stringToRank: string,\n  options: RankItemOptions<TItem>\n): Ranking {\n  testString = prepareValueForComparison(testString, options)\n  stringToRank = prepareValueForComparison(stringToRank, options)\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL\n  }\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase()\n  stringToRank = stringToRank.toLowerCase()\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL\n  }\n\n  // starts with\n  if (testString.startsWith(stringToRank)) {\n    return rankings.STARTS_WITH\n  }\n\n  // word starts with\n  if (testString.includes(` ${stringToRank}`)) {\n    return rankings.WORD_STARTS_WITH\n  }\n\n  // contains\n  if (testString.includes(stringToRank)) {\n    return rankings.CONTAINS\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH\n  }\n\n  // acronym\n  if (getAcronym(testString).includes(stringToRank)) {\n    return rankings.ACRONYM\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank)\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string: string): string {\n  let acronym = ''\n  const wordsInString = string.split(' ')\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-')\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1)\n    })\n  })\n  return acronym\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(\n  testString: string,\n  stringToRank: string\n): Ranking {\n  let matchingInOrderCharCount = 0\n  let charNumber = 0\n  function findMatchingCharacter(\n    matchChar: undefined | string,\n    string: string,\n    index: number\n  ) {\n    for (let j = index, J = string.length; j < J; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1\n        return j + 1\n      }\n    }\n    return -1\n  }\n  function getRanking(spread: number) {\n    const spreadPercentage = 1 / spread\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage\n    return ranking as Ranking\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0)\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH\n  }\n  charNumber = firstIndex\n  for (let i = 1, I = stringToRank.length; i < I; i++) {\n    const matchChar = stringToRank[i]\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber)\n    const found = charNumber > -1\n    if (!found) {\n      return rankings.NO_MATCH\n    }\n  }\n\n  const spread = charNumber - firstIndex\n  return getRanking(spread)\n}\n\n/**\n * Sorts items that have a rank, index, and accessorIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nexport function compareItems<TItem>(a: RankingInfo, b: RankingInfo): number {\n  return a.rank === b.rank ? 0 : a.rank > b.rank ? -1 : 1\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison<TItem>(\n  value: string,\n  { keepDiacritics }: RankItemOptions<TItem>\n): string {\n  // value might not actually be a string at this point (we don't get to choose)\n  // so part of preparing the value for comparison is ensure that it is a string\n  value = `${value}` // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value)\n  }\n  return value\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues<TItem>(\n  item: TItem,\n  accessor: Accessor<TItem>\n): Array<string> {\n  let accessorFn = accessor as AccessorFn<TItem>\n\n  if (typeof accessor === 'object') {\n    accessorFn = accessor.accessor\n  }\n\n  const value = accessorFn(item)\n\n  // because `value` can also be undefined\n  if (value == null) {\n    return []\n  }\n\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  return [String(value)]\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param item - the item from which the values will be retrieved\n * @param keys - the keys to use to retrieve the values\n * @return objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank<TItem>(\n  item: TItem,\n  accessors: ReadonlyArray<Accessor<TItem>>\n) {\n  const allValues: Array<{\n    itemValue: string\n    attributes: AccessorAttributes\n  }> = []\n  for (let j = 0, J = accessors.length; j < J; j++) {\n    const accessor = accessors[j]!\n    const attributes = getAccessorAttributes(accessor)\n    const itemValues = getItemValues(item, accessor)\n    for (let i = 0, I = itemValues.length; i < I; i++) {\n      allValues.push({\n        itemValue: itemValues[i]!,\n        attributes,\n      })\n    }\n  }\n  return allValues\n}\n\nconst defaultKeyAttributes = {\n  maxRanking: Infinity as Ranking,\n  minRanking: -Infinity as Ranking,\n}\n/**\n * Gets all the attributes for the given accessor\n * @param accessor - the accessor from which the attributes will be retrieved\n * @return object containing the accessor's attributes\n */\nfunction getAccessorAttributes<TItem>(\n  accessor: Accessor<TItem>\n): AccessorAttributes {\n  if (typeof accessor === 'function') {\n    return defaultKeyAttributes\n  }\n  return { ...defaultKeyAttributes, ...accessor }\n}\n"]},"metadata":{},"sourceType":"script"}